/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'

// Create Virtual Routes

const MetricsLazyImport = createFileRoute('/metrics')()
const IssuesLazyImport = createFileRoute('/issues')()
const FuncSpecsLazyImport = createFileRoute('/func-specs')()
const DependenciesLazyImport = createFileRoute('/dependencies')()

// Create/Update Routes

const MetricsLazyRoute = MetricsLazyImport.update({
  id: '/metrics',
  path: '/metrics',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/metrics.lazy').then((d) => d.Route))

const IssuesLazyRoute = IssuesLazyImport.update({
  id: '/issues',
  path: '/issues',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/issues.lazy').then((d) => d.Route))

const FuncSpecsLazyRoute = FuncSpecsLazyImport.update({
  id: '/func-specs',
  path: '/func-specs',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/func-specs.lazy').then((d) => d.Route))

const DependenciesLazyRoute = DependenciesLazyImport.update({
  id: '/dependencies',
  path: '/dependencies',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/dependencies.lazy').then((d) => d.Route))

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/dependencies': {
      id: '/dependencies'
      path: '/dependencies'
      fullPath: '/dependencies'
      preLoaderRoute: typeof DependenciesLazyImport
      parentRoute: typeof rootRoute
    }
    '/func-specs': {
      id: '/func-specs'
      path: '/func-specs'
      fullPath: '/func-specs'
      preLoaderRoute: typeof FuncSpecsLazyImport
      parentRoute: typeof rootRoute
    }
    '/issues': {
      id: '/issues'
      path: '/issues'
      fullPath: '/issues'
      preLoaderRoute: typeof IssuesLazyImport
      parentRoute: typeof rootRoute
    }
    '/metrics': {
      id: '/metrics'
      path: '/metrics'
      fullPath: '/metrics'
      preLoaderRoute: typeof MetricsLazyImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/dependencies': typeof DependenciesLazyRoute
  '/func-specs': typeof FuncSpecsLazyRoute
  '/issues': typeof IssuesLazyRoute
  '/metrics': typeof MetricsLazyRoute
}

export interface FileRoutesByTo {
  '/dependencies': typeof DependenciesLazyRoute
  '/func-specs': typeof FuncSpecsLazyRoute
  '/issues': typeof IssuesLazyRoute
  '/metrics': typeof MetricsLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/dependencies': typeof DependenciesLazyRoute
  '/func-specs': typeof FuncSpecsLazyRoute
  '/issues': typeof IssuesLazyRoute
  '/metrics': typeof MetricsLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/dependencies' | '/func-specs' | '/issues' | '/metrics'
  fileRoutesByTo: FileRoutesByTo
  to: '/dependencies' | '/func-specs' | '/issues' | '/metrics'
  id: '__root__' | '/dependencies' | '/func-specs' | '/issues' | '/metrics'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  DependenciesLazyRoute: typeof DependenciesLazyRoute
  FuncSpecsLazyRoute: typeof FuncSpecsLazyRoute
  IssuesLazyRoute: typeof IssuesLazyRoute
  MetricsLazyRoute: typeof MetricsLazyRoute
}

const rootRouteChildren: RootRouteChildren = {
  DependenciesLazyRoute: DependenciesLazyRoute,
  FuncSpecsLazyRoute: FuncSpecsLazyRoute,
  IssuesLazyRoute: IssuesLazyRoute,
  MetricsLazyRoute: MetricsLazyRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/dependencies",
        "/func-specs",
        "/issues",
        "/metrics"
      ]
    },
    "/dependencies": {
      "filePath": "dependencies.lazy.tsx"
    },
    "/func-specs": {
      "filePath": "func-specs.lazy.tsx"
    },
    "/issues": {
      "filePath": "issues.lazy.tsx"
    },
    "/metrics": {
      "filePath": "metrics.lazy.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
