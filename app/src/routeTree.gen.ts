/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'

// Create Virtual Routes

const MetricsLazyImport = createFileRoute('/metrics')()
const FuncSpecsLazyImport = createFileRoute('/func-specs')()
const DepsVizLazyImport = createFileRoute('/deps-viz')()

// Create/Update Routes

const MetricsLazyRoute = MetricsLazyImport.update({
  id: '/metrics',
  path: '/metrics',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/metrics.lazy').then((d) => d.Route))

const FuncSpecsLazyRoute = FuncSpecsLazyImport.update({
  id: '/func-specs',
  path: '/func-specs',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/func-specs.lazy').then((d) => d.Route))

const DepsVizLazyRoute = DepsVizLazyImport.update({
  id: '/deps-viz',
  path: '/deps-viz',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/deps-viz.lazy').then((d) => d.Route))

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/deps-viz': {
      id: '/deps-viz'
      path: '/deps-viz'
      fullPath: '/deps-viz'
      preLoaderRoute: typeof DepsVizLazyImport
      parentRoute: typeof rootRoute
    }
    '/func-specs': {
      id: '/func-specs'
      path: '/func-specs'
      fullPath: '/func-specs'
      preLoaderRoute: typeof FuncSpecsLazyImport
      parentRoute: typeof rootRoute
    }
    '/metrics': {
      id: '/metrics'
      path: '/metrics'
      fullPath: '/metrics'
      preLoaderRoute: typeof MetricsLazyImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/deps-viz': typeof DepsVizLazyRoute
  '/func-specs': typeof FuncSpecsLazyRoute
  '/metrics': typeof MetricsLazyRoute
}

export interface FileRoutesByTo {
  '/deps-viz': typeof DepsVizLazyRoute
  '/func-specs': typeof FuncSpecsLazyRoute
  '/metrics': typeof MetricsLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/deps-viz': typeof DepsVizLazyRoute
  '/func-specs': typeof FuncSpecsLazyRoute
  '/metrics': typeof MetricsLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/deps-viz' | '/func-specs' | '/metrics'
  fileRoutesByTo: FileRoutesByTo
  to: '/deps-viz' | '/func-specs' | '/metrics'
  id: '__root__' | '/deps-viz' | '/func-specs' | '/metrics'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  DepsVizLazyRoute: typeof DepsVizLazyRoute
  FuncSpecsLazyRoute: typeof FuncSpecsLazyRoute
  MetricsLazyRoute: typeof MetricsLazyRoute
}

const rootRouteChildren: RootRouteChildren = {
  DepsVizLazyRoute: DepsVizLazyRoute,
  FuncSpecsLazyRoute: FuncSpecsLazyRoute,
  MetricsLazyRoute: MetricsLazyRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/deps-viz",
        "/func-specs",
        "/metrics"
      ]
    },
    "/deps-viz": {
      "filePath": "deps-viz.lazy.tsx"
    },
    "/func-specs": {
      "filePath": "func-specs.lazy.tsx"
    },
    "/metrics": {
      "filePath": "metrics.lazy.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
