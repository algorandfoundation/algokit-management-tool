ID|Level|Spec Name |Description|Current Functionality|Comments
1|1|Smart Contract|Must have the ability to create,||
1.1|2|High level Language Use|A set of HLL syntaxes and semantics to enable writing Algorand Smart Contracts.||
1.1.1|3|High level Language Use Native Syntax|Each HLL definition should use as much native syntax as possibile while keeping the number of new concepts, types, and idioms to a minimum.||
1.1.2|3|Clear definition of native High Level Language Syntax|Must define exactly what subset of the native HLL is available and the restriction when it is.||
1.2|1|Smart Contract Compilation|Has the ability to compile Algorand Python code into AVM (Algorand Virtual Machine) bytecode for execution on the Algorand blockchain||
1.2.1|2|Modular Design|The components of the compiler should have a modular design that enables extensibility and code reuse, facilitating future enhancements and support for new languages or platforms||
1.2.2|2|Frontend|Has the ability to compile code from an AlgoKit-support language to Intermediate Representation of the code||
1.2.2.1|3|Support Languages|Must have the ability to support multiple languages in which users will write smart contracts. These languages must be as semantically close as possible to the original languages||
1.2.2.1.1|4|Python|Must support the Python language||
1.2.2.1.2|4|Typescript|Must support the Typescript Language||
1.2.3|2|Multi-stage optimization|Must support applying multiple optimization passes at different IR stages that allow for more specialized and effective optimizations. The end result should be TEAL Intermediate Representation||
1.2.3.1|3|Optimization Parameters|Must be able to optimize the code based on the following parameters||
1.2.3.1.1|4|opcode budget|Must be able to optimize the code for opcode budget||
1.2.3.1.2|4|code size|Must be able to optimize the code for code size||
1.2.4|2|Output|The compiler should be able to turn TEAL Intermediate Representation to various target languages and output various files generated from the TEAL.||
1.2.4.1|3|Artifacts|The compiler should generate various output artifacts, including:||
1.2.4.1.1|4|TEAL code|The compiler should output TEAL code||
1.2.4.1.2|4|AVM bytecode|The compiler should output AVM bytecode||
1.2.4.1.3|4|ARC-32 application specification file|The compiler should output ARC-32 application specification files (for ARC-4 contracts)||
1.2.4.1.4|4|ARC-56 application specification file|The compiler should output ARC-56 application specification files (for ARC-4 contracts)||
1.2.4.1.5|4|Source Maps|Must be able to produce debugging symbols and source maps.||
1.2.4.2|3|AVM Target Version|Must be able to target all versions of the AVM.||
1.3|2|Data Types|Uses a typing system for the particular language that that provide a statically typed representation of the behaviour that is possible on the Algorand Virtual Machine|MyPy for python, Typescript for Javascript|
1.3.1|3|AVM Types|||
1.3.1.1|4|UInt64|||
1.3.1.2|4|Bytes|||
1.3.1.3|4|String|||
1.3.1.4|4|BigUInt|||
1.3.1.5|4|bool|||
1.3.1.6|4|Account|||
1.3.1.7|4|Asset|||
1.3.1.8|4|Application|||
1.3.2|3|Template Variables|Must provide a way to define template variables that are placeholders for a deploy-time provided value. They allow developers to define placeholders in their Algorand Python smart contract code that can be replaced with specific literal values during the compilation process.||
1.3.3|3|ARC-4 Types|||
1.3.3.1|4|Address|Must have support for Address: An alias for an array containing 32 bytes representing an Algorand address||
1.3.3.2|4|BigUFixedNxM|Must have support for BigUFixedNxM: An ARC4 UFixed representing a decimal with the number of bits and precision specified.||
1.3.3.3|4|BigUIntN|Must have support for BigUIntN: An ARC4 UInt consisting of the number of bits specified.||
1.3.3.4|4|Bool|Must have support for Bool: An ARC4 encoded bool||
1.3.3.5|4|Bytes|Must have support for Bytes: An ARC4 alias for a UInt8||
1.3.3.6|4|DynamicArray|Must have support for DynamicArray: A dynamically sized ARC4 Array of the specified type||
1.3.3.7|4|DynamicBytes|Must have support for DynamicBytes: A variable sized array of bytes||
1.3.3.8|4|StaticArray|Must have support for StaticArray: A fixed length ARC4 Array of the specified type and length||
1.3.3.9|4|String|Must have support for String: An ARC4 sequence of bytes containing a UTF8 string||
1.3.3.10|4|Struct|Must have support for Struct: Base class for ARC4 Struct types||
1.3.3.11|4|Tuple|Must have support for Tuple: An ARC4 ABI tuple, containing other ARC4 ABI types||
1.3.3.12|4|UFixedNxM|Must have support for UFixedNxM: An ARC4 UFixed representing a decimal with the number of bits and precision specified.||
1.3.3.13|4|UIntN|Must have support for UIntN: An ARC4 UInt consisting of the number of bits specified.||
1.4|2|Data Storage|Must have ways to store data within your smart contracts, both persistently and temporarily and various access types||
1.4.1|3|Global Storage|Must allow for data that global available to the contract that needs to be accessible across multiple calls to the contract and should persist throughout the contract's lifetime||
1.4.2|3|Local Storage|Must allow for storing data specific to individual accounts that interact with your contract||
1.4.3|3|Box Storage|Must allow for data globally available to the contract that is more flexible and potentially larger data storage||
1.4.3.1|4|Box|Must be able to store single values||
1.4.3.2|4|BoxMap|Must be able to organizing multiple boxes (e.g. key-value store)||
1.4.3.3|4|BoxRef|Must allow for working with large byte arrays in boxes, offering efficient methods for reading and updating portions of the data.||
1.4.3.4|4|Raw AVM Ops|Allow for fine-grained control to interact with box storage directly using the AVM operations|algopy.op|
1.4.4|3|Scratch Space|Must allow for temporary storage that's only available during a single execution of your contract's approval or clear-state program||
1.5|2|Transactions|Must allow working with various types of transactions within your smart contracts||
1.5.1|3|Transaction Types|||
1.5.1.1|4|Payment|||
1.5.1.2|4|KeyRegistration|||
1.5.1.3|4|AssetConfig|||
1.5.1.4|4|AssetTransfer|||
1.5.1.5|4|AssetFreeze|||
1.5.1.6|4|ApplicationCall|||
1.5.2|3|Group Transactions|Must provide a way to create group transactions such that transactions can be grouped together atomically, ensuring that either all transactions in a group succeed or none of them do||
1.5.2.1|4|Group transactions by index|Must be able to group transactions by assigning an index to them|algopy.gtxn.PaymentTransaction(group_index)|
1.5.3|3|Inner Transactions|Must provide a structured way to define, submit, and manage inner transactions.||
1.5.3.1|4|Submit inner transaction individually|Must be able to submit inner transactions individually||
1.5.3.2|4|Submit inner transaction as a group|Must be able to submit inner transactions as a group||
1.5.3.3|4|Access inner transactions results|Must be able to access inner transactions logs after the operation is complete||
1.6|2|Contract Structures|||
1.6.1|3|Contract Types|||
1.6.1.1|4|ARC4 Contracts|||
1.6.1.1.1|5|Scaffolding for ARC4 Contracts|||
1.6.1.1.2|5|Automated routing|||
1.6.1.1.3|5|ABI methods|||
1.6.1.1.4|5|Bare methods|||
1.6.1.2|4|Logic Signatures|||
1.6.2|3|Subroutines|Must allow for subroutines that are internal or private methods to a contract||
1.6.2.1|4|Subroutine accessibility|Subroutines must be able to exist as part of a contract class, or at the module level so they can be used by multiple classes or even across multiple projects.||
1.6.3|3|Control Flow Structures|||
1.6.3.1|4|If Statements|||
1.6.3.2|4|Ternary Conditions|||
1.6.3.3|4|While Loops|||
1.6.3.4|4|For Loops|||
1.6.3.5|4|Match Statements|||
1.7|2|Logging|Allow emitting debugging and event information as well as return values from your contracts to the caller.||
1.7.1|3|Logging various Data Types|Allow logging the following data types:||
1.7.1.1|4|int|Allow logging int literals / module variables (encoded as raw bytes, not ASCII)||
1.7.1.2|4|UInt64|Allow logging UInt64 values (encoded as raw bytes, not ASCII)||
1.7.1.3|4|str|Allow logging str literals / module variables (encoded as UTF-8)||
1.7.1.4|4|bytes literals|Allow logging bytes literals / module variables (encoded as is)||
1.7.1.5|4|Bytes values|Allow logging Bytes values (encoded as is)||
1.7.1.6|4|BytesBacked|Allow logging BytesBacked values, which includes String, BigUInt, Account and all of the ARC-4 types (encoded as their underlying bytes values)||
1.7.2|3|Log single value|Allow logging a single value||
1.7.3|3|Log multiple values|Allow logging mulitple values||
1.7.4|3|ARC-28 Event Logs|Allow for logging ARC-28 events according to the ARC-28 specification||
1.8|2|Error Handling|Allow for handling errors on execution of a smart contract||
1.8.1|3|Assertions|Allow for addition of assertions to a smart contract that will immediately fail the execution if the statement evaluate to false||
1.8.1.1|4|Assertion Error Message|Allow for a string error message added to the assertion that will be added as a TEAL comment if the assertion fails. The error should show a TEAL stack trace of an error and thus show the error message to the caller (when source maps have been loaded)||
1.8.2|3|Explicit Failures|Allow to fail the contract explicitly. This operation should cause the TEAL program to immediately and unconditionally fail.|op.err()|
1.9|2|Debugging|NEED MORE DETAIL HERE||
1.1|2|Contract Auditing|NEED MORE DETAIL HERE||
1.11|2|Development Environment|Provide a streamlined development experience with tools for testing, debugging, and deploying contracts.||
1.11.1|3|Intellisense|Code completion and suggestions within your editor.||
1.11.2|3|Linting|Static analysis to identify potential code style and quality issues.||
1.11.3|3|Formatting|Automatic code style enforcement to maintain consistency.||
1.11.4|3|Debugging|Tools for setting breakpoints and stepping through code execution.||
1.11.5|3|Deployment|Simplified processes for deploying contracts to the Algorand network.||
1.11.6|3|CI/CD|Integration with continuous integration and continuous delivery pipelines.||
2|1|Algokit Templates|Scaffolding for an AlgoKit-first project.||
2.1|2|Template Definition|Definition of a parameterizable and reusable templates||
2.1.1|3|Create project scaffold|The ability to create a project directory structure that conforms the best practices of AlgoKit-first project|Copier allows you to set the project dir structure|Giorgio Ciotti I like the term "AlgoKit First" project, but what does mean exactly?
2.1.1.1|4|Standard project structure|Define a standard project structure and strategy to, optionally, deploy a compiled smart contract.||
2.1.1.2|4|Integrate with IDE visual debugging|||
2.1.1.2.1|5|Integrate with visual debugging VSCode|Must integrate with VSCode visual debugging tools.||Giorgio Ciotti, you might want to be explicit with the IDEs here.
2.1.1.2.2|4|Integrate visual debugging PyCharm|Must integrate with PyCharm visual debugging tools.|Future|
2.1.1.3|4|Support all smart contract languages|Smart contract template must support all supported languages.||
2.1.1.4|4|Support versioning|Must integrate with git.||
2.1.1.5|4|Mutli-contract deployment|The deployment strategy shall be able to orchestrate a complex multi-contract deployment in addition to a single-contract deployment.|Future|
2.1.2|3|Create templating parameters|The project should contain parameters that the user can set when the template is being initialized|Copier has jinja templating for this function|
2.1.3|3|Creating project dependencies|Project dependencies should be able to be set and upgraded for each template|Copier allows to create the files you want in the project and thus you can define and upgrade your project deps as you want|
2.1.4|3|Pinning LocalNet version|A template must define the acceptable range of versions compatible with that project.|Future|
2.1.5|3|Template upgradeability|There should exist a path to migration in case a template is re-rendered on top of an existing project.|Future|Debatable if this is really needed. However I have found useful to re-render templates in my personal projects instead of manually upgrading all the bits I needed. This is perhaps a sympthom of how quickly the tools changed over this last year so in the future this function should be needed less and less.
2.2|2|Template Runner|||
2.2.1|3|Initializing the project from the command line|The ability to run a command and create a new algokit project||
2.2.1.1|4|Generating the project through a guided wizard|Allow the user to set the parameters for the given project through a wizard cli with prompts and options|algokit init and subsequent prompts|
2.2.1.2|4|Generating the project through command line arguments|Allow the user to set the paramaters through command line arguments with defaults for the arguments not specifiied|algokit init with flags for arguments|
2.3|2|Example Template|||
2.3.1|3|Starter Template|Must have at least a lean, beginner friendly, and non-overwhelming variant.||Giorgio Ciotti, Define here the items that are in the starter template that make it lean so you can distinguish it from a production-ready one. They can be sub levels if you want.
2.3.1.1|4|Smart Contract Language|Have the ability to choose a language in which to develop smart contracts||
2.3.1.1.1|5|Python|The template structure and dependencies to develop smart contracts in python|algorand-python-template|
2.3.1.1.2|5|Typescript|The template structure and dependencies to develop smart contracts in typescript|tealscript-template|Soon to be puya-ts template
2.3.1.2|4|Frontend Framework|||
2.3.1.2.1|5|React Frontend|DESCRIBE WHAT THE BASIC REACT TEMPLATE HAS HERE|algokit-react-frontend-template|
2.3.1.2.1.1|6|Wallet aggregators integration|Must integrate with Algorand wallet aggregators.||
2.3.2|3|Production Template|Must have a full featured, complete, and comprehensive production ready variant.||
2.3.2.1|4|Smart Contract Language|Have the ability to choose a language in which to develop smart contracts||
2.3.2.1.1|5|Python|The template structure and dependencies to develop smart contracts in python||
2.3.2.1.2|5|Typescript|The template structure and dependencies to develop smart contracts in typescript||
2.3.2.2|4|Frontend Framework|||
2.3.2.2.1|5|React Frontend|DESCRIBE WHAT THE PRODUCTION REACT TEMPLATE HAS HERE||
2.3.2.3||Production CI-CD|||
2.3.2.3.1|5|Smart Contract CI-CD|Must provide CI-CD pipelines using GitHub workflows and virtualized task runners. These pipelines must be: compatible with output stability checks, cheap in terms of compute minutes, dependency environment and artifact cache friendly, and finally parametrizable at least in terms of Algorand API provider and target network.||Giorgio Ciotti, I would define the platforms here and give an idea of what "sane" means. I am guessing you mean netlify and vercel, right?
2.3.2.3.2|5|Frontend CI-CD|Must provide CI-CD pipelines using GitHub workflows and virtualized task runners. These pipelines should: be compatible with Vercel and Netlify deployments using API tokens, implement best practices for building a vite project.||
2.4.1|3|Template variant migration path|It shall be possible, by use of generators, template re-rendering, or otherwise, to migrate from a beginner template to a production one easily.||
3|1|Environment Management|||
3.1|2|Localnet|A system-wide set of containerized services working in concert to provide a local replica of the Algorand blockchain.|algokit localnet|
3.1.1|3|Localnet Management|Manages the use of the Localnet through commands like start and stop|algokit localnet|Giorgio Ciotti, I broke up your spec into separate ones to specify each of the management functions
3.1.1.1|4|Localnet Start|Start-ups localnet so that it's running algod, indexer and KMD|algokit localnet start|
3.1.1.2|4|Localnet Stop|Stop all running processes related to localnet but does not clear the state information|algokit localnet stop|
3.1.1.3|4|Localnet Status|Get the status of all the containerized services that are running. The information should contain information about the blockchain state, node state, connection information (e.g. ports, schema), indexer state, KMD state.|algokit localnet status|
3.1.1.3.1||Specific node status|???||
3.1.1.4|4|Localnet reset|Resets localnet to the its original state (i.e. deletes all the blocks)|algokit localnet reset|
3.1.1.5|4|Localnet update to latest version|Updates the localnet containerize services to the latest container versions|algokit localnet reset --update|
3.1.1.5.1|5|Localnet detect older versions|Detects if the current localnet containers are not the latest version an prompts the user to the update the container versions.|This check is run before you start localnet|
3.1.1.7|4|Localnet configure container engine|Allows users to choose different container engines on which to run the containerize services, e.g. docker, podman|algokit localnet config|
3.1.1.8|4|Global or project-based localnet|The ability to set a global localnet config (i.e. pinned versions for each service) or have particular pinned versions that vary by project. This would be something similar to global python installation vs virtual envs|Future|
3.1.1.8.1|5|Version configuration by project|The ability to customize the version of each of the services in localnet|Future|There is function in algokit localnet reset -P that Specify the custom localnet configuration directory. Does this achieve this in any way?
3.1.2|3|Localnet interaction|Interact with localnet services to get awareness of nodes and blockchain data||
3.1.2.1|4|Web-Browser based interactions|Can be inspected thru a web-browser application|algokit localnet explore|Beside the fact that Lora should be able to point to localhost, there are issues with PrivateNetworkAccess. https://developer.chrome.com/blog/private-network-access-preflight. Basically if a website tries to access a local resource, that will trigger a browser preflight request to that local resource. algod was patched to be able to respond to that request header and be configured however algokit still doesn't use that configuration and proxies everything instead using nginx.
3.1.2.2|4|CLI interaction with algod|Allows to iteract directly with the underlying algod containerized service|algokit localnet console|
3.1.2.3|4|OTHER INTERACTIONS?????|||Are there additional ways to interact with the indexer or any other localnet service? I didn't see more commands in the `algokit localnet`
3.1.3|3|Localnet in a Web IDE|The ability to run localnet and its functions, including development in a Web IDE. The functionality for development will be determined the the functionality offered by the Web IDE||
3.1.3.1|4|Localnet in Github Codespace|Must be able to run in Github codespaces|algokit localnet codespace|